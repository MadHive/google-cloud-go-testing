// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/MadHive/google-cloud-go-testing/bigquery/bqiface"
	"google.golang.org/api/iterator"
	"sync"
)

// Ensure, that DatasetIteratorMock does implement bqiface.DatasetIterator.
// If this is not the case, regenerate this file with moq.
var _ bqiface.DatasetIterator = &DatasetIteratorMock{}

// DatasetIteratorMock is a mock implementation of bqiface.DatasetIterator.
//
//     func TestSomethingThatUsesDatasetIterator(t *testing.T) {
//
//         // make and configure a mocked bqiface.DatasetIterator
//         mockedDatasetIterator := &DatasetIteratorMock{
//             NextFunc: func() (bqiface.Dataset, error) {
// 	               panic("mock out the Next method")
//             },
//             PageInfoFunc: func() *iterator.PageInfo {
// 	               panic("mock out the PageInfo method")
//             },
//             SetFilterFunc: func(in1 string)  {
// 	               panic("mock out the SetFilter method")
//             },
//             SetListHiddenFunc: func(in1 bool)  {
// 	               panic("mock out the SetListHidden method")
//             },
//             SetProjectIDFunc: func(in1 string)  {
// 	               panic("mock out the SetProjectID method")
//             },
//         }
//
//         // use mockedDatasetIterator in code that requires bqiface.DatasetIterator
//         // and then make assertions.
//
//     }
type DatasetIteratorMock struct {
	// NextFunc mocks the Next method.
	NextFunc func() (bqiface.Dataset, error)

	// PageInfoFunc mocks the PageInfo method.
	PageInfoFunc func() *iterator.PageInfo

	// SetFilterFunc mocks the SetFilter method.
	SetFilterFunc func(in1 string)

	// SetListHiddenFunc mocks the SetListHidden method.
	SetListHiddenFunc func(in1 bool)

	// SetProjectIDFunc mocks the SetProjectID method.
	SetProjectIDFunc func(in1 string)

	// calls tracks calls to the methods.
	calls struct {
		// Next holds details about calls to the Next method.
		Next []struct {
		}
		// PageInfo holds details about calls to the PageInfo method.
		PageInfo []struct {
		}
		// SetFilter holds details about calls to the SetFilter method.
		SetFilter []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// SetListHidden holds details about calls to the SetListHidden method.
		SetListHidden []struct {
			// In1 is the in1 argument value.
			In1 bool
		}
		// SetProjectID holds details about calls to the SetProjectID method.
		SetProjectID []struct {
			// In1 is the in1 argument value.
			In1 string
		}
	}
	lockNext          sync.RWMutex
	lockPageInfo      sync.RWMutex
	lockSetFilter     sync.RWMutex
	lockSetListHidden sync.RWMutex
	lockSetProjectID  sync.RWMutex
}

// Next calls NextFunc.
func (mock *DatasetIteratorMock) Next() (bqiface.Dataset, error) {
	if mock.NextFunc == nil {
		panic("DatasetIteratorMock.NextFunc: method is nil but DatasetIterator.Next was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc()
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//     len(mockedDatasetIterator.NextCalls())
func (mock *DatasetIteratorMock) NextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}

// PageInfo calls PageInfoFunc.
func (mock *DatasetIteratorMock) PageInfo() *iterator.PageInfo {
	if mock.PageInfoFunc == nil {
		panic("DatasetIteratorMock.PageInfoFunc: method is nil but DatasetIterator.PageInfo was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPageInfo.Lock()
	mock.calls.PageInfo = append(mock.calls.PageInfo, callInfo)
	mock.lockPageInfo.Unlock()
	return mock.PageInfoFunc()
}

// PageInfoCalls gets all the calls that were made to PageInfo.
// Check the length with:
//     len(mockedDatasetIterator.PageInfoCalls())
func (mock *DatasetIteratorMock) PageInfoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPageInfo.RLock()
	calls = mock.calls.PageInfo
	mock.lockPageInfo.RUnlock()
	return calls
}

// SetFilter calls SetFilterFunc.
func (mock *DatasetIteratorMock) SetFilter(in1 string) {
	if mock.SetFilterFunc == nil {
		panic("DatasetIteratorMock.SetFilterFunc: method is nil but DatasetIterator.SetFilter was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockSetFilter.Lock()
	mock.calls.SetFilter = append(mock.calls.SetFilter, callInfo)
	mock.lockSetFilter.Unlock()
	mock.SetFilterFunc(in1)
}

// SetFilterCalls gets all the calls that were made to SetFilter.
// Check the length with:
//     len(mockedDatasetIterator.SetFilterCalls())
func (mock *DatasetIteratorMock) SetFilterCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockSetFilter.RLock()
	calls = mock.calls.SetFilter
	mock.lockSetFilter.RUnlock()
	return calls
}

// SetListHidden calls SetListHiddenFunc.
func (mock *DatasetIteratorMock) SetListHidden(in1 bool) {
	if mock.SetListHiddenFunc == nil {
		panic("DatasetIteratorMock.SetListHiddenFunc: method is nil but DatasetIterator.SetListHidden was just called")
	}
	callInfo := struct {
		In1 bool
	}{
		In1: in1,
	}
	mock.lockSetListHidden.Lock()
	mock.calls.SetListHidden = append(mock.calls.SetListHidden, callInfo)
	mock.lockSetListHidden.Unlock()
	mock.SetListHiddenFunc(in1)
}

// SetListHiddenCalls gets all the calls that were made to SetListHidden.
// Check the length with:
//     len(mockedDatasetIterator.SetListHiddenCalls())
func (mock *DatasetIteratorMock) SetListHiddenCalls() []struct {
	In1 bool
} {
	var calls []struct {
		In1 bool
	}
	mock.lockSetListHidden.RLock()
	calls = mock.calls.SetListHidden
	mock.lockSetListHidden.RUnlock()
	return calls
}

// SetProjectID calls SetProjectIDFunc.
func (mock *DatasetIteratorMock) SetProjectID(in1 string) {
	if mock.SetProjectIDFunc == nil {
		panic("DatasetIteratorMock.SetProjectIDFunc: method is nil but DatasetIterator.SetProjectID was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockSetProjectID.Lock()
	mock.calls.SetProjectID = append(mock.calls.SetProjectID, callInfo)
	mock.lockSetProjectID.Unlock()
	mock.SetProjectIDFunc(in1)
}

// SetProjectIDCalls gets all the calls that were made to SetProjectID.
// Check the length with:
//     len(mockedDatasetIterator.SetProjectIDCalls())
func (mock *DatasetIteratorMock) SetProjectIDCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockSetProjectID.RLock()
	calls = mock.calls.SetProjectID
	mock.lockSetProjectID.RUnlock()
	return calls
}
