// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"cloud.google.com/go/bigquery"
	"context"
	"github.com/MadHive/google-cloud-go-testing/bigquery/bqiface"
	"sync"
)

// Ensure, that JobMock does implement bqiface.Job.
// If this is not the case, regenerate this file with moq.
var _ bqiface.Job = &JobMock{}

// JobMock is a mock implementation of bqiface.Job.
//
//     func TestSomethingThatUsesJob(t *testing.T) {
//
//         // make and configure a mocked bqiface.Job
//         mockedJob := &JobMock{
//             CancelFunc: func(in1 context.Context) error {
// 	               panic("mock out the Cancel method")
//             },
//             ConfigFunc: func() (bigquery.JobConfig, error) {
// 	               panic("mock out the Config method")
//             },
//             IDFunc: func() string {
// 	               panic("mock out the ID method")
//             },
//             LastStatusFunc: func() *bigquery.JobStatus {
// 	               panic("mock out the LastStatus method")
//             },
//             LocationFunc: func() string {
// 	               panic("mock out the Location method")
//             },
//             ReadFunc: func(in1 context.Context) (bqiface.RowIterator, error) {
// 	               panic("mock out the Read method")
//             },
//             StatusFunc: func(in1 context.Context) (*bigquery.JobStatus, error) {
// 	               panic("mock out the Status method")
//             },
//             WaitFunc: func(in1 context.Context) (*bigquery.JobStatus, error) {
// 	               panic("mock out the Wait method")
//             },
//         }
//
//         // use mockedJob in code that requires bqiface.Job
//         // and then make assertions.
//
//     }
type JobMock struct {
	// CancelFunc mocks the Cancel method.
	CancelFunc func(in1 context.Context) error

	// ConfigFunc mocks the Config method.
	ConfigFunc func() (bigquery.JobConfig, error)

	// IDFunc mocks the ID method.
	IDFunc func() string

	// LastStatusFunc mocks the LastStatus method.
	LastStatusFunc func() *bigquery.JobStatus

	// LocationFunc mocks the Location method.
	LocationFunc func() string

	// ReadFunc mocks the Read method.
	ReadFunc func(in1 context.Context) (bqiface.RowIterator, error)

	// StatusFunc mocks the Status method.
	StatusFunc func(in1 context.Context) (*bigquery.JobStatus, error)

	// WaitFunc mocks the Wait method.
	WaitFunc func(in1 context.Context) (*bigquery.JobStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// Cancel holds details about calls to the Cancel method.
		Cancel []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// Config holds details about calls to the Config method.
		Config []struct {
		}
		// ID holds details about calls to the ID method.
		ID []struct {
		}
		// LastStatus holds details about calls to the LastStatus method.
		LastStatus []struct {
		}
		// Location holds details about calls to the Location method.
		Location []struct {
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// Status holds details about calls to the Status method.
		Status []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// Wait holds details about calls to the Wait method.
		Wait []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
	}
	lockCancel     sync.RWMutex
	lockConfig     sync.RWMutex
	lockID         sync.RWMutex
	lockLastStatus sync.RWMutex
	lockLocation   sync.RWMutex
	lockRead       sync.RWMutex
	lockStatus     sync.RWMutex
	lockWait       sync.RWMutex
}

// Cancel calls CancelFunc.
func (mock *JobMock) Cancel(in1 context.Context) error {
	if mock.CancelFunc == nil {
		panic("JobMock.CancelFunc: method is nil but Job.Cancel was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	mock.lockCancel.Lock()
	mock.calls.Cancel = append(mock.calls.Cancel, callInfo)
	mock.lockCancel.Unlock()
	return mock.CancelFunc(in1)
}

// CancelCalls gets all the calls that were made to Cancel.
// Check the length with:
//     len(mockedJob.CancelCalls())
func (mock *JobMock) CancelCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	mock.lockCancel.RLock()
	calls = mock.calls.Cancel
	mock.lockCancel.RUnlock()
	return calls
}

// Config calls ConfigFunc.
func (mock *JobMock) Config() (bigquery.JobConfig, error) {
	if mock.ConfigFunc == nil {
		panic("JobMock.ConfigFunc: method is nil but Job.Config was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConfig.Lock()
	mock.calls.Config = append(mock.calls.Config, callInfo)
	mock.lockConfig.Unlock()
	return mock.ConfigFunc()
}

// ConfigCalls gets all the calls that were made to Config.
// Check the length with:
//     len(mockedJob.ConfigCalls())
func (mock *JobMock) ConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConfig.RLock()
	calls = mock.calls.Config
	mock.lockConfig.RUnlock()
	return calls
}

// ID calls IDFunc.
func (mock *JobMock) ID() string {
	if mock.IDFunc == nil {
		panic("JobMock.IDFunc: method is nil but Job.ID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockID.Lock()
	mock.calls.ID = append(mock.calls.ID, callInfo)
	mock.lockID.Unlock()
	return mock.IDFunc()
}

// IDCalls gets all the calls that were made to ID.
// Check the length with:
//     len(mockedJob.IDCalls())
func (mock *JobMock) IDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockID.RLock()
	calls = mock.calls.ID
	mock.lockID.RUnlock()
	return calls
}

// LastStatus calls LastStatusFunc.
func (mock *JobMock) LastStatus() *bigquery.JobStatus {
	if mock.LastStatusFunc == nil {
		panic("JobMock.LastStatusFunc: method is nil but Job.LastStatus was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLastStatus.Lock()
	mock.calls.LastStatus = append(mock.calls.LastStatus, callInfo)
	mock.lockLastStatus.Unlock()
	return mock.LastStatusFunc()
}

// LastStatusCalls gets all the calls that were made to LastStatus.
// Check the length with:
//     len(mockedJob.LastStatusCalls())
func (mock *JobMock) LastStatusCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLastStatus.RLock()
	calls = mock.calls.LastStatus
	mock.lockLastStatus.RUnlock()
	return calls
}

// Location calls LocationFunc.
func (mock *JobMock) Location() string {
	if mock.LocationFunc == nil {
		panic("JobMock.LocationFunc: method is nil but Job.Location was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLocation.Lock()
	mock.calls.Location = append(mock.calls.Location, callInfo)
	mock.lockLocation.Unlock()
	return mock.LocationFunc()
}

// LocationCalls gets all the calls that were made to Location.
// Check the length with:
//     len(mockedJob.LocationCalls())
func (mock *JobMock) LocationCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLocation.RLock()
	calls = mock.calls.Location
	mock.lockLocation.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *JobMock) Read(in1 context.Context) (bqiface.RowIterator, error) {
	if mock.ReadFunc == nil {
		panic("JobMock.ReadFunc: method is nil but Job.Read was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(in1)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedJob.ReadCalls())
func (mock *JobMock) ReadCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// Status calls StatusFunc.
func (mock *JobMock) Status(in1 context.Context) (*bigquery.JobStatus, error) {
	if mock.StatusFunc == nil {
		panic("JobMock.StatusFunc: method is nil but Job.Status was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc(in1)
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//     len(mockedJob.StatusCalls())
func (mock *JobMock) StatusCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}

// Wait calls WaitFunc.
func (mock *JobMock) Wait(in1 context.Context) (*bigquery.JobStatus, error) {
	if mock.WaitFunc == nil {
		panic("JobMock.WaitFunc: method is nil but Job.Wait was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	mock.lockWait.Lock()
	mock.calls.Wait = append(mock.calls.Wait, callInfo)
	mock.lockWait.Unlock()
	return mock.WaitFunc(in1)
}

// WaitCalls gets all the calls that were made to Wait.
// Check the length with:
//     len(mockedJob.WaitCalls())
func (mock *JobMock) WaitCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	mock.lockWait.RLock()
	calls = mock.calls.Wait
	mock.lockWait.RUnlock()
	return calls
}
