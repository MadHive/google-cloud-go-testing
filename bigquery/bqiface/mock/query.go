// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"cloud.google.com/go/bigquery"
	"context"
	"github.com/MadHive/google-cloud-go-testing/bigquery/bqiface"
	"sync"
)

// Ensure, that QueryMock does implement bqiface.Query.
// If this is not the case, regenerate this file with moq.
var _ bqiface.Query = &QueryMock{}

// QueryMock is a mock implementation of bqiface.Query.
//
//     func TestSomethingThatUsesQuery(t *testing.T) {
//
//         // make and configure a mocked bqiface.Query
//         mockedQuery := &QueryMock{
//             JobIDConfigFunc: func() *bigquery.JobIDConfig {
// 	               panic("mock out the JobIDConfig method")
//             },
//             ReadFunc: func(in1 context.Context) (bqiface.RowIterator, error) {
// 	               panic("mock out the Read method")
//             },
//             RunFunc: func(in1 context.Context) (bqiface.Job, error) {
// 	               panic("mock out the Run method")
//             },
//             SetQueryConfigFunc: func(in1 bqiface.QueryConfig)  {
// 	               panic("mock out the SetQueryConfig method")
//             },
//         }
//
//         // use mockedQuery in code that requires bqiface.Query
//         // and then make assertions.
//
//     }
type QueryMock struct {
	// JobIDConfigFunc mocks the JobIDConfig method.
	JobIDConfigFunc func() *bigquery.JobIDConfig

	// ReadFunc mocks the Read method.
	ReadFunc func(in1 context.Context) (bqiface.RowIterator, error)

	// RunFunc mocks the Run method.
	RunFunc func(in1 context.Context) (bqiface.Job, error)

	// SetQueryConfigFunc mocks the SetQueryConfig method.
	SetQueryConfigFunc func(in1 bqiface.QueryConfig)

	// calls tracks calls to the methods.
	calls struct {
		// JobIDConfig holds details about calls to the JobIDConfig method.
		JobIDConfig []struct {
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// SetQueryConfig holds details about calls to the SetQueryConfig method.
		SetQueryConfig []struct {
			// In1 is the in1 argument value.
			In1 bqiface.QueryConfig
		}
	}
	lockJobIDConfig    sync.RWMutex
	lockRead           sync.RWMutex
	lockRun            sync.RWMutex
	lockSetQueryConfig sync.RWMutex
}

// JobIDConfig calls JobIDConfigFunc.
func (mock *QueryMock) JobIDConfig() *bigquery.JobIDConfig {
	if mock.JobIDConfigFunc == nil {
		panic("QueryMock.JobIDConfigFunc: method is nil but Query.JobIDConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockJobIDConfig.Lock()
	mock.calls.JobIDConfig = append(mock.calls.JobIDConfig, callInfo)
	mock.lockJobIDConfig.Unlock()
	return mock.JobIDConfigFunc()
}

// JobIDConfigCalls gets all the calls that were made to JobIDConfig.
// Check the length with:
//     len(mockedQuery.JobIDConfigCalls())
func (mock *QueryMock) JobIDConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockJobIDConfig.RLock()
	calls = mock.calls.JobIDConfig
	mock.lockJobIDConfig.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *QueryMock) Read(in1 context.Context) (bqiface.RowIterator, error) {
	if mock.ReadFunc == nil {
		panic("QueryMock.ReadFunc: method is nil but Query.Read was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(in1)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedQuery.ReadCalls())
func (mock *QueryMock) ReadCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *QueryMock) Run(in1 context.Context) (bqiface.Job, error) {
	if mock.RunFunc == nil {
		panic("QueryMock.RunFunc: method is nil but Query.Run was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(in1)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedQuery.RunCalls())
func (mock *QueryMock) RunCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// SetQueryConfig calls SetQueryConfigFunc.
func (mock *QueryMock) SetQueryConfig(in1 bqiface.QueryConfig) {
	if mock.SetQueryConfigFunc == nil {
		panic("QueryMock.SetQueryConfigFunc: method is nil but Query.SetQueryConfig was just called")
	}
	callInfo := struct {
		In1 bqiface.QueryConfig
	}{
		In1: in1,
	}
	mock.lockSetQueryConfig.Lock()
	mock.calls.SetQueryConfig = append(mock.calls.SetQueryConfig, callInfo)
	mock.lockSetQueryConfig.Unlock()
	mock.SetQueryConfigFunc(in1)
}

// SetQueryConfigCalls gets all the calls that were made to SetQueryConfig.
// Check the length with:
//     len(mockedQuery.SetQueryConfigCalls())
func (mock *QueryMock) SetQueryConfigCalls() []struct {
	In1 bqiface.QueryConfig
} {
	var calls []struct {
		In1 bqiface.QueryConfig
	}
	mock.lockSetQueryConfig.RLock()
	calls = mock.calls.SetQueryConfig
	mock.lockSetQueryConfig.RUnlock()
	return calls
}
