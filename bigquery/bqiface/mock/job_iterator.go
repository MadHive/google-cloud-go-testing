// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"cloud.google.com/go/bigquery"
	"github.com/MadHive/google-cloud-go-testing/bigquery/bqiface"
	"google.golang.org/api/iterator"
	"sync"
)

// Ensure, that JobIteratorMock does implement bqiface.JobIterator.
// If this is not the case, regenerate this file with moq.
var _ bqiface.JobIterator = &JobIteratorMock{}

// JobIteratorMock is a mock implementation of bqiface.JobIterator.
//
//     func TestSomethingThatUsesJobIterator(t *testing.T) {
//
//         // make and configure a mocked bqiface.JobIterator
//         mockedJobIterator := &JobIteratorMock{
//             NextFunc: func() (bqiface.Job, error) {
// 	               panic("mock out the Next method")
//             },
//             PageInfoFunc: func() *iterator.PageInfo {
// 	               panic("mock out the PageInfo method")
//             },
//             SetAllUsersFunc: func(in1 bool)  {
// 	               panic("mock out the SetAllUsers method")
//             },
//             SetProjectIDFunc: func(in1 string)  {
// 	               panic("mock out the SetProjectID method")
//             },
//             SetStateFunc: func(in1 bigquery.State)  {
// 	               panic("mock out the SetState method")
//             },
//         }
//
//         // use mockedJobIterator in code that requires bqiface.JobIterator
//         // and then make assertions.
//
//     }
type JobIteratorMock struct {
	// NextFunc mocks the Next method.
	NextFunc func() (bqiface.Job, error)

	// PageInfoFunc mocks the PageInfo method.
	PageInfoFunc func() *iterator.PageInfo

	// SetAllUsersFunc mocks the SetAllUsers method.
	SetAllUsersFunc func(in1 bool)

	// SetProjectIDFunc mocks the SetProjectID method.
	SetProjectIDFunc func(in1 string)

	// SetStateFunc mocks the SetState method.
	SetStateFunc func(in1 bigquery.State)

	// calls tracks calls to the methods.
	calls struct {
		// Next holds details about calls to the Next method.
		Next []struct {
		}
		// PageInfo holds details about calls to the PageInfo method.
		PageInfo []struct {
		}
		// SetAllUsers holds details about calls to the SetAllUsers method.
		SetAllUsers []struct {
			// In1 is the in1 argument value.
			In1 bool
		}
		// SetProjectID holds details about calls to the SetProjectID method.
		SetProjectID []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// SetState holds details about calls to the SetState method.
		SetState []struct {
			// In1 is the in1 argument value.
			In1 bigquery.State
		}
	}
	lockNext         sync.RWMutex
	lockPageInfo     sync.RWMutex
	lockSetAllUsers  sync.RWMutex
	lockSetProjectID sync.RWMutex
	lockSetState     sync.RWMutex
}

// Next calls NextFunc.
func (mock *JobIteratorMock) Next() (bqiface.Job, error) {
	if mock.NextFunc == nil {
		panic("JobIteratorMock.NextFunc: method is nil but JobIterator.Next was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc()
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//     len(mockedJobIterator.NextCalls())
func (mock *JobIteratorMock) NextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}

// PageInfo calls PageInfoFunc.
func (mock *JobIteratorMock) PageInfo() *iterator.PageInfo {
	if mock.PageInfoFunc == nil {
		panic("JobIteratorMock.PageInfoFunc: method is nil but JobIterator.PageInfo was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPageInfo.Lock()
	mock.calls.PageInfo = append(mock.calls.PageInfo, callInfo)
	mock.lockPageInfo.Unlock()
	return mock.PageInfoFunc()
}

// PageInfoCalls gets all the calls that were made to PageInfo.
// Check the length with:
//     len(mockedJobIterator.PageInfoCalls())
func (mock *JobIteratorMock) PageInfoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPageInfo.RLock()
	calls = mock.calls.PageInfo
	mock.lockPageInfo.RUnlock()
	return calls
}

// SetAllUsers calls SetAllUsersFunc.
func (mock *JobIteratorMock) SetAllUsers(in1 bool) {
	if mock.SetAllUsersFunc == nil {
		panic("JobIteratorMock.SetAllUsersFunc: method is nil but JobIterator.SetAllUsers was just called")
	}
	callInfo := struct {
		In1 bool
	}{
		In1: in1,
	}
	mock.lockSetAllUsers.Lock()
	mock.calls.SetAllUsers = append(mock.calls.SetAllUsers, callInfo)
	mock.lockSetAllUsers.Unlock()
	mock.SetAllUsersFunc(in1)
}

// SetAllUsersCalls gets all the calls that were made to SetAllUsers.
// Check the length with:
//     len(mockedJobIterator.SetAllUsersCalls())
func (mock *JobIteratorMock) SetAllUsersCalls() []struct {
	In1 bool
} {
	var calls []struct {
		In1 bool
	}
	mock.lockSetAllUsers.RLock()
	calls = mock.calls.SetAllUsers
	mock.lockSetAllUsers.RUnlock()
	return calls
}

// SetProjectID calls SetProjectIDFunc.
func (mock *JobIteratorMock) SetProjectID(in1 string) {
	if mock.SetProjectIDFunc == nil {
		panic("JobIteratorMock.SetProjectIDFunc: method is nil but JobIterator.SetProjectID was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockSetProjectID.Lock()
	mock.calls.SetProjectID = append(mock.calls.SetProjectID, callInfo)
	mock.lockSetProjectID.Unlock()
	mock.SetProjectIDFunc(in1)
}

// SetProjectIDCalls gets all the calls that were made to SetProjectID.
// Check the length with:
//     len(mockedJobIterator.SetProjectIDCalls())
func (mock *JobIteratorMock) SetProjectIDCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockSetProjectID.RLock()
	calls = mock.calls.SetProjectID
	mock.lockSetProjectID.RUnlock()
	return calls
}

// SetState calls SetStateFunc.
func (mock *JobIteratorMock) SetState(in1 bigquery.State) {
	if mock.SetStateFunc == nil {
		panic("JobIteratorMock.SetStateFunc: method is nil but JobIterator.SetState was just called")
	}
	callInfo := struct {
		In1 bigquery.State
	}{
		In1: in1,
	}
	mock.lockSetState.Lock()
	mock.calls.SetState = append(mock.calls.SetState, callInfo)
	mock.lockSetState.Unlock()
	mock.SetStateFunc(in1)
}

// SetStateCalls gets all the calls that were made to SetState.
// Check the length with:
//     len(mockedJobIterator.SetStateCalls())
func (mock *JobIteratorMock) SetStateCalls() []struct {
	In1 bigquery.State
} {
	var calls []struct {
		In1 bigquery.State
	}
	mock.lockSetState.RLock()
	calls = mock.calls.SetState
	mock.lockSetState.RUnlock()
	return calls
}
