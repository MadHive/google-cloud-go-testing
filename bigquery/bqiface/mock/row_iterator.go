// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"cloud.google.com/go/bigquery"
	"github.com/MadHive/google-cloud-go-testing/bigquery/bqiface"
	"google.golang.org/api/iterator"
	"sync"
)

// Ensure, that RowIteratorMock does implement bqiface.RowIterator.
// If this is not the case, regenerate this file with moq.
var _ bqiface.RowIterator = &RowIteratorMock{}

// RowIteratorMock is a mock implementation of bqiface.RowIterator.
//
//     func TestSomethingThatUsesRowIterator(t *testing.T) {
//
//         // make and configure a mocked bqiface.RowIterator
//         mockedRowIterator := &RowIteratorMock{
//             NextFunc: func(in1 interface{}) error {
// 	               panic("mock out the Next method")
//             },
//             PageInfoFunc: func() *iterator.PageInfo {
// 	               panic("mock out the PageInfo method")
//             },
//             SchemaFunc: func() bigquery.Schema {
// 	               panic("mock out the Schema method")
//             },
//             SetStartIndexFunc: func(in1 uint64)  {
// 	               panic("mock out the SetStartIndex method")
//             },
//             TotalRowsFunc: func() uint64 {
// 	               panic("mock out the TotalRows method")
//             },
//         }
//
//         // use mockedRowIterator in code that requires bqiface.RowIterator
//         // and then make assertions.
//
//     }
type RowIteratorMock struct {
	// NextFunc mocks the Next method.
	NextFunc func(in1 interface{}) error

	// PageInfoFunc mocks the PageInfo method.
	PageInfoFunc func() *iterator.PageInfo

	// SchemaFunc mocks the Schema method.
	SchemaFunc func() bigquery.Schema

	// SetStartIndexFunc mocks the SetStartIndex method.
	SetStartIndexFunc func(in1 uint64)

	// TotalRowsFunc mocks the TotalRows method.
	TotalRowsFunc func() uint64

	// calls tracks calls to the methods.
	calls struct {
		// Next holds details about calls to the Next method.
		Next []struct {
			// In1 is the in1 argument value.
			In1 interface{}
		}
		// PageInfo holds details about calls to the PageInfo method.
		PageInfo []struct {
		}
		// Schema holds details about calls to the Schema method.
		Schema []struct {
		}
		// SetStartIndex holds details about calls to the SetStartIndex method.
		SetStartIndex []struct {
			// In1 is the in1 argument value.
			In1 uint64
		}
		// TotalRows holds details about calls to the TotalRows method.
		TotalRows []struct {
		}
	}
	lockNext          sync.RWMutex
	lockPageInfo      sync.RWMutex
	lockSchema        sync.RWMutex
	lockSetStartIndex sync.RWMutex
	lockTotalRows     sync.RWMutex
}

// Next calls NextFunc.
func (mock *RowIteratorMock) Next(in1 interface{}) error {
	if mock.NextFunc == nil {
		panic("RowIteratorMock.NextFunc: method is nil but RowIterator.Next was just called")
	}
	callInfo := struct {
		In1 interface{}
	}{
		In1: in1,
	}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc(in1)
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//     len(mockedRowIterator.NextCalls())
func (mock *RowIteratorMock) NextCalls() []struct {
	In1 interface{}
} {
	var calls []struct {
		In1 interface{}
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}

// PageInfo calls PageInfoFunc.
func (mock *RowIteratorMock) PageInfo() *iterator.PageInfo {
	if mock.PageInfoFunc == nil {
		panic("RowIteratorMock.PageInfoFunc: method is nil but RowIterator.PageInfo was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPageInfo.Lock()
	mock.calls.PageInfo = append(mock.calls.PageInfo, callInfo)
	mock.lockPageInfo.Unlock()
	return mock.PageInfoFunc()
}

// PageInfoCalls gets all the calls that were made to PageInfo.
// Check the length with:
//     len(mockedRowIterator.PageInfoCalls())
func (mock *RowIteratorMock) PageInfoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPageInfo.RLock()
	calls = mock.calls.PageInfo
	mock.lockPageInfo.RUnlock()
	return calls
}

// Schema calls SchemaFunc.
func (mock *RowIteratorMock) Schema() bigquery.Schema {
	if mock.SchemaFunc == nil {
		panic("RowIteratorMock.SchemaFunc: method is nil but RowIterator.Schema was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSchema.Lock()
	mock.calls.Schema = append(mock.calls.Schema, callInfo)
	mock.lockSchema.Unlock()
	return mock.SchemaFunc()
}

// SchemaCalls gets all the calls that were made to Schema.
// Check the length with:
//     len(mockedRowIterator.SchemaCalls())
func (mock *RowIteratorMock) SchemaCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSchema.RLock()
	calls = mock.calls.Schema
	mock.lockSchema.RUnlock()
	return calls
}

// SetStartIndex calls SetStartIndexFunc.
func (mock *RowIteratorMock) SetStartIndex(in1 uint64) {
	if mock.SetStartIndexFunc == nil {
		panic("RowIteratorMock.SetStartIndexFunc: method is nil but RowIterator.SetStartIndex was just called")
	}
	callInfo := struct {
		In1 uint64
	}{
		In1: in1,
	}
	mock.lockSetStartIndex.Lock()
	mock.calls.SetStartIndex = append(mock.calls.SetStartIndex, callInfo)
	mock.lockSetStartIndex.Unlock()
	mock.SetStartIndexFunc(in1)
}

// SetStartIndexCalls gets all the calls that were made to SetStartIndex.
// Check the length with:
//     len(mockedRowIterator.SetStartIndexCalls())
func (mock *RowIteratorMock) SetStartIndexCalls() []struct {
	In1 uint64
} {
	var calls []struct {
		In1 uint64
	}
	mock.lockSetStartIndex.RLock()
	calls = mock.calls.SetStartIndex
	mock.lockSetStartIndex.RUnlock()
	return calls
}

// TotalRows calls TotalRowsFunc.
func (mock *RowIteratorMock) TotalRows() uint64 {
	if mock.TotalRowsFunc == nil {
		panic("RowIteratorMock.TotalRowsFunc: method is nil but RowIterator.TotalRows was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTotalRows.Lock()
	mock.calls.TotalRows = append(mock.calls.TotalRows, callInfo)
	mock.lockTotalRows.Unlock()
	return mock.TotalRowsFunc()
}

// TotalRowsCalls gets all the calls that were made to TotalRows.
// Check the length with:
//     len(mockedRowIterator.TotalRowsCalls())
func (mock *RowIteratorMock) TotalRowsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTotalRows.RLock()
	calls = mock.calls.TotalRows
	mock.lockTotalRows.RUnlock()
	return calls
}
