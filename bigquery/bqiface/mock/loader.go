// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"cloud.google.com/go/bigquery"
	"context"
	"github.com/MadHive/google-cloud-go-testing/bigquery/bqiface"
	"sync"
)

// Ensure, that LoaderMock does implement bqiface.Loader.
// If this is not the case, regenerate this file with moq.
var _ bqiface.Loader = &LoaderMock{}

// LoaderMock is a mock implementation of bqiface.Loader.
//
//     func TestSomethingThatUsesLoader(t *testing.T) {
//
//         // make and configure a mocked bqiface.Loader
//         mockedLoader := &LoaderMock{
//             JobIDConfigFunc: func() *bigquery.JobIDConfig {
// 	               panic("mock out the JobIDConfig method")
//             },
//             RunFunc: func(in1 context.Context) (bqiface.Job, error) {
// 	               panic("mock out the Run method")
//             },
//             SetLoadConfigFunc: func(in1 bqiface.LoadConfig)  {
// 	               panic("mock out the SetLoadConfig method")
//             },
//         }
//
//         // use mockedLoader in code that requires bqiface.Loader
//         // and then make assertions.
//
//     }
type LoaderMock struct {
	// JobIDConfigFunc mocks the JobIDConfig method.
	JobIDConfigFunc func() *bigquery.JobIDConfig

	// RunFunc mocks the Run method.
	RunFunc func(in1 context.Context) (bqiface.Job, error)

	// SetLoadConfigFunc mocks the SetLoadConfig method.
	SetLoadConfigFunc func(in1 bqiface.LoadConfig)

	// calls tracks calls to the methods.
	calls struct {
		// JobIDConfig holds details about calls to the JobIDConfig method.
		JobIDConfig []struct {
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// SetLoadConfig holds details about calls to the SetLoadConfig method.
		SetLoadConfig []struct {
			// In1 is the in1 argument value.
			In1 bqiface.LoadConfig
		}
	}
	lockJobIDConfig   sync.RWMutex
	lockRun           sync.RWMutex
	lockSetLoadConfig sync.RWMutex
}

// JobIDConfig calls JobIDConfigFunc.
func (mock *LoaderMock) JobIDConfig() *bigquery.JobIDConfig {
	if mock.JobIDConfigFunc == nil {
		panic("LoaderMock.JobIDConfigFunc: method is nil but Loader.JobIDConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockJobIDConfig.Lock()
	mock.calls.JobIDConfig = append(mock.calls.JobIDConfig, callInfo)
	mock.lockJobIDConfig.Unlock()
	return mock.JobIDConfigFunc()
}

// JobIDConfigCalls gets all the calls that were made to JobIDConfig.
// Check the length with:
//     len(mockedLoader.JobIDConfigCalls())
func (mock *LoaderMock) JobIDConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockJobIDConfig.RLock()
	calls = mock.calls.JobIDConfig
	mock.lockJobIDConfig.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *LoaderMock) Run(in1 context.Context) (bqiface.Job, error) {
	if mock.RunFunc == nil {
		panic("LoaderMock.RunFunc: method is nil but Loader.Run was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(in1)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedLoader.RunCalls())
func (mock *LoaderMock) RunCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// SetLoadConfig calls SetLoadConfigFunc.
func (mock *LoaderMock) SetLoadConfig(in1 bqiface.LoadConfig) {
	if mock.SetLoadConfigFunc == nil {
		panic("LoaderMock.SetLoadConfigFunc: method is nil but Loader.SetLoadConfig was just called")
	}
	callInfo := struct {
		In1 bqiface.LoadConfig
	}{
		In1: in1,
	}
	mock.lockSetLoadConfig.Lock()
	mock.calls.SetLoadConfig = append(mock.calls.SetLoadConfig, callInfo)
	mock.lockSetLoadConfig.Unlock()
	mock.SetLoadConfigFunc(in1)
}

// SetLoadConfigCalls gets all the calls that were made to SetLoadConfig.
// Check the length with:
//     len(mockedLoader.SetLoadConfigCalls())
func (mock *LoaderMock) SetLoadConfigCalls() []struct {
	In1 bqiface.LoadConfig
} {
	var calls []struct {
		In1 bqiface.LoadConfig
	}
	mock.lockSetLoadConfig.RLock()
	calls = mock.calls.SetLoadConfig
	mock.lockSetLoadConfig.RUnlock()
	return calls
}
